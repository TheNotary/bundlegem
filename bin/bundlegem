#!/usr/bin/env ruby

require 'optparse'
require 'bundler'
require 'bundlegem'


Signal.trap("INT") { exit 1 }
options = { bin: false, ext: false, coc: false }

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [options] GEM_NAME"

  opts.on("-t", "--template TEMPLATE", "Specify a template") do |template|
    options[:template] = template
  end

  opts.on("-l", "--list", "List available templates") do
    puts Bundlegem.list
    exit
  end

  opts.on("-c", "--cheat-sheet", "Show list of variables available in templates") do
    puts Bundlegem.cheat_sheet
    exit
  end

  opts.on("-v", "--version", "Show version") do
    puts Bundlegem.version
    exit
  end

  opts.on("--install-public-templates", "Install public templates") do
    Bundlegem.install_public_templates
    exit
  end

  opts.on("--to-template", "Convert directory to template") do
    Bundlegem.dir_to_template
    exit
  end

  opts.on("--help", "Show help") do
    puts opts
    puts Bundlegem::HELP_MSG
    exit
  end
end

parser.parse!

if ARGV.empty?
  puts "Error: you need to specify a name for the project being created\n\n"
  puts Bundlegem::HELP_MSG
  exit 1
end

if ARGV.length > 1
  puts "Error: there were unrecognized parameters specified in command"
  puts Bundlegem::HELP_MSG
  exit 1
end


# fyi parser.parse! splices options out of ARGV, so gem_name doesn't need to be specified first
gem_name = ARGV.first
Bundlegem.gem(options, gem_name)
