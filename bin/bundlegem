#!/usr/bin/env ruby

# Exit cleanly from an early interrupt
Signal.trap("INT") { exit 1 }
require 'bundler'
require 'bundlegem'
# require 'bundlergem/friendly_errors'

help_msg = <<-HEREDOC
Use bundlegem to start a new project folder based on a predefined template.

Usage Examples:

  # Make a new ruby gem
  $  bundlegem your_gem_name

  # List available teplates
  $  bundlegem --list

  # Create a ruby gem project using the built in service template
  $ bundlegem your_gem_name -t service

  # not implemented, should create a new gem template in ~/.bundlegem/templates
  # that you'll love customizing to your personal preference
  $ bundlegem --newtemplate

  $ bundlegem --help              # shows this message
HEREDOC

if ARGV.length < 1
  puts "error: you need to specify a name for the project being created\n\n"
  puts help_msg
  exit 1
end

if ARGV[0] == "--help"
  puts help_msg
  exit 0
end

if ARGV[0] == "--list" or ARGV[0] == "-l"
  puts Bundlegem.list
  exit 0
end

if ARGV[0] == "--newtemplate"
  puts "Sorry, I haven't been implemented, I don't have a lot of free time atm :("
  exit 0
  Bundlegem.newtemplate(ARGV)
end

if ARGV[0] == "--install-best-templates"
  puts Bundlegem.install_best_templates
  exit 0
end



options = {"bin"=>false, "ext"=>false, :coc=> false}
gem_name = ARGV[0] # gem name

if ARGV.length > 1
  if ARGV[1] != "-t" and ARGV[1] != "--template"
    puts "You can ONLY use -t as an argument because I'm quite busy and should be doing something else right now!"
    puts help_msg
    exit 1
  end

  options.merge!({"template" => ARGV[2]})
end

Bundlegem.gem(options, gem_name)
